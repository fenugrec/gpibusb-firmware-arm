%readonly-tables
%global-table
%compare-strncmp
%define lookup-function-name cmd_lookup
%define hash-function-name cmd_hash
%define initializer-suffix ,do_nothing,""

%{
#include <string.h>

#include "cmd_hashtable.h"
#include "cmd_handlers.h"

// silly warning for missing prototype
const struct cmd_entry *cmd_lookup (register const char *str, register size_t len);
%}

%struct-type
struct cmd_entry;

%%
# gperf control file to generate cmd_hashtable.c
# the list below must correspond to the function decls in "cmd_handlers.h "
##### Non-standard commands
"++strip", do_strip, ""
"++debug", do_debug, "[0|1] enable debug output"
"++dfu", do_reset_dfu, ""
##### Prologix Compatible Command Set
"++addr", do_addr, ""
"++auto", do_autoRead, ""
"++clr", do_clr, "send SDC"
"++eoi", do_eoi, "[0|1] assert EOI with last char"
"++eos", do_eos2, "GPIB termination char to append. 0: CRLF, 1: CR, 2: LF, 3:none"
"++eot_enable", do_eotEnable, ""
"++eot_char", do_eotChar, "<char_decimal>. USB termination char"
"++ifc", do_ifc, ""
"++llo", do_llo, "set lockout"
"++loc", do_loc, "set local"
"++lon", do_lon, "[0|1] listen-only (all addresses)"
"++mode", do_mode, "[0|1] enable Controller mode"
"++read", do_readCmd2, "[eoi|<char_decimal>]"
"++read_tmo_ms", do_readTimeout, "inter-char timeout"
"++rst", do_reset, ""
"++savecfg", do_savecfg, ""
"++spoll", do_spoll, "[<PAD> [<SAD>]]"
"++srq", do_srq, "query SRQ signal"
"++status", do_status, "specify SPOLL byte"
"++trg", do_trg, "[<PADn> [<SADn>] ...] send GET"
"++ver", do_version2, ""
"++help", do_help, ""
%%
void cmd_find_run(const char *cmdstr, unsigned cmdlen, const char *args) {
	const struct cmd_entry *cmd;

	cmd = cmd_lookup(cmdstr, cmdlen);
	if (cmd == NULL) {
		return;
	}
	cmd->handler(args);
}

#define ARRAY_SIZE(x)	(sizeof(x) / sizeof((x)[0]))
void cmd_walk_cmdlist(void (*cb)(const struct cmd_entry *cmd)) {
	unsigned idx;
	for (idx=0; idx < ARRAY_SIZE(wordlist); idx++) {
		if (wordlist[idx].handler == &do_nothing) {
			continue;
		}
		cb(&wordlist[idx]);
	}
}
